<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>740</x>
      <y>355</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Transform
--
//position of the object
-position: Position
//rotation of the object
-rotation: float
--
//moves the position by x and y
+translate(x,y)
//rotates the object by a certain amount of degree
+rotate(deg)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>525</x>
      <y>355</y>
      <w>115</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>abstract:GameObject
--
//stores all the gameobject that are created
//static keyword means that the variable is part of the class
//rather than the instance of a class
//we can save all the gameObject created by adding 
//the instance of an object itself to the list
//we do this in the init() function
-static gameObjects: GameObject[]
-id: int
-transform: Transform 
-children: GameObject[]
-attachable: Attachable
//
//This is only true if we want
//the object to be present in the game
//world, but won't update 
-isEnabled: bool
--
//this function is run when the object is created
//this function should be an IIEF
//Immediately Invoked function
//Please search in google if you dont know
+init()
//this function is run every frame
//but it itself does not have a loop
//you will put here things that you need to update every frame
+update()
+addChild()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>635</x>
      <y>395</y>
      <w>115</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>525</x>
      <y>495</y>
      <w>115</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>CameraObject
//attachable here is going to be added locally
//so you will create 
--
-id: int
-transform: Transform 
-canvasSize : Position
-children: GameObject[]
-attachable: Attachable
--
+init()
+update()
+addChild


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>495</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>abstract:Task
--
//this is the gameobject that this object is attached to
-parent
--
+init()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>365</x>
      <y>585</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>610</y>
      <w>255</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;490.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>365</x>
      <y>610</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>210</x>
      <y>665</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Collision extends Task
--
//this is the gameobject that this object is attached to
-parent
-cellsOccupied[]
--
+init()
//
//Collision uses a graph
//each collision object occupies a certain number of tiles
//amount of tiles occupied is based on the size of the gameobject itself
//Collision takes care of the occupation of cells
//
+updateCollisionBoundary()
+enableCollision()
+disableCollision()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>665</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Image exetends Task
--
//this is the gameobject that this object is attached to
-parent
//image source
-src
//generally same as parentSize(GameObject size)
-imageSize()
--
+init()
+updateFunction
-setSrc()
-setImageSize()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>610</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>500</x>
      <y>610</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>455</x>
      <y>665</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Movement exetends Task
--
//this is the gameobject that this object is attached to
-parent
//
//a helper class
//provides details of when to move
-movementController
--
+init()
//
//updateMovement() uses the public functions of the movement controller
//to know if a movement should be done
//for example, if moveUp() = true , then { move up object by getSpeed()}
//to move the object we use parent.transform.translate
//
+updateMovement()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>455</x>
      <y>825</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>MovementController 
--
-speed
--
+init()
+getSpeed()
+moveUp() : bool
+moveDown() : bool
+moveRight() : bool
+moveLeft() : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>505</x>
      <y>755</y>
      <w>15</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes>
    <additional_attributes>10.0;140.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>125</x>
      <y>165</y>
      <w>110</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>NOTE:
Size in the game is :
1 unit = 25 pixels x25 pixels
when zoom = 1

Camera has a functionality 
of zoom. We only want to
increase the pixels of an 
image when increasing the 
zoom.

So we use a seperate
unit for measurement

2 unit = 50px x 50px
0.5 unit = 12.5px x 12.5px

Therfore, unit is a multiplier
to get the actual size of an image</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>395</y>
      <w>115</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;210.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>205</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>GameRunner
--
//stores all the gameObject created
gameObjects: GameObject[]
--
+init()
//this is the loop
//this runs the game in a loop
//all the gameobjects will have their update function
+update()


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>355</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Attachable
--
//this is the gameobject that this object is attached to
-parent
-tasks: Task[]
--
+init()


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>365</x>
      <y>445</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>520</y>
      <w>180</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>NOTE:

Attachable vs Methods (Functions inside a class)

Attachable are those that most of the game object needs.
Like movement and collision.

We will use method which are specific to a game object

For example, CameraObject. It needs rendering which
no other objects are going to use.
Therefore, we will use method in that case.

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>295</y>
      <w>15</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>940</x>
      <y>355</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Position
--
//position of the object
-xPos: float
-yPos: float

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>390</y>
      <w>110</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes>
    <additional_attributes>200.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>445</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>125</x>
      <y>345</y>
      <w>110</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>NOTE:

Task is abstract 
Therefore, we can create
more "Task" object later on.
But now these "Task" Objects should be on the game engine</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>745</x>
      <y>205</y>
      <w>105</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>//This is a singleton.
WorldGenerator
--
//WorldGenerator needs an Image to build the world
-map: Image
//WorldGenerator needs an Image to build the collision
//by collision I mean walls that won't be broken
//if we want a dynamic wall we can ignore this
-collisionMap: Image
--
+init()
//generates the world
//the only thing it does, is creating a table that 
//has number of rows = number of cells
//and create a gameobject, which holds an image of a map
//which is postioned to (0,0)
+generateWorld()



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>185</y>
      <w>105</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>//this is going to be a global singleton variable
ClientDatabaseHelper
import "sqlite"
--
//stores all the gameObject created
-Database _database
--
+init()
//this is the loop
//this runs the game in a loop
//all the gameobjects will have their update function
+insertItem()
+deleteItem()
+updateItem()
+getItems()
+rawInsert()
+rawDelete()
+rawUpdate()
+rawQuery()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>210</x>
      <y>820</y>
      <w>105</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>//This is a cell of a graph
//the graph represents the game world
//this created to provide collisions
Cell
--
//if there is a gameobject occupying the space
//then occupiedId = id of the gameObject
//if there is no gameobject occupying
//then occupiedId = -1
-id: int
-occupiedId: int
//
+occupy()
+unOccupy()




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>845</x>
      <y>245</y>
      <w>165</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
World Generator uses insert for quey</panel_attributes>
    <additional_attributes>310.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>240</y>
      <w>125</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
World is generated
in the GameRunner.init()</panel_attributes>
    <additional_attributes>230.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>755</y>
      <w>15</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
